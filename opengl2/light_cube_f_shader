#version 330 core
out vec4 FragColor;
in vec3 Normal;
in vec3 FragPos;

uniform vec3 view_position;

struct Material{
vec3 ambient;
vec3 diffuse;
vec3 specular;
float shininess;
};

struct Light{
vec3 ambient;
vec3 diffuse;
vec3 specular;
vec3 position;
};

uniform Material material;
uniform Light light;

vec3 ambient = light.ambient * material.ambient;

vec3 lightDir = normalize(light.position - FragPos);
float diff = max(dot(Normal, lightDir), 0.0);
vec3 diffuse = (diff * material.diffuse) * light.diffuse;

vec3 view_dir = normalize(view_position - FragPos);
vec3 reflect_dir = reflect(-lightDir, Normal);
float spec = pow(max(dot(view_dir, reflect_dir), 0.0), material.shininess);
vec3 specular = (spec * material.specular) * light.specular;

vec3 result = ambient + diffuse + specular;


void main(){
FragColor = vec4(result,1.0f);
}
